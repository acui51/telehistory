{"version":3,"sources":["components/GraphToggle/GraphToggle.module.css","hoc/Aux.js","components/NavigationBar/NavigationBar.js","components/Footer/Footer.js","components/Layout/Layout.js","components/Chart/ChartModal.js","components/GraphToggle/GraphToggle.js","components/Chart/Chart.jsx","components/KeywordChart/keywordObj.js","components/KeywordChart/Keyword.js","mock/insert_api.js","components/Sentiment/sentimentObj.js","components/Sentiment/Sentiment.js","containers/ChartBuilder/ChartBuilder.js","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","components/NavigationBar/NavigationBar.module.css","components/Layout/Layout.module.css","components/KeywordChart/Keyword.module.css","components/Sentiment/Sentiment.module.css"],"names":["module","exports","aux","props","children","navigationBar","Navbar","expand","className","classes","Brand","href","style","marginRight","marginBottom","Toggle","aria-controls","Collapse","id","Nav","Link","Anchor","RightPush","size","Footer","d","Date","getFullYear","Layout","Aux","NavigationBar","Jumbotron","Title","LearnMore","Button","variant","DisplayChartModal","useState","show","setShow","graph","FullScreenButton","onClick","Modal","onHide","aria-labelledby","Body","graphToggle","GraphToggle","type","value","checked","selectedOption","onChange","graphHandler","Chart","state","data","labels","dates","datasets","users","map","user","index","label","colorIndex","colors","length","borderColor","Array","from","freq","date","backgroundColor","fill","lineTension","borderCapStyle","lineGraph","width","height","options","title","display","text","fontSize","legend","position","scales","yAxes","scaleLabel","labelString","xAxes","barGraph","setState","styles","ChartDesc","color","this","ChartModal","Component","external_id","error","extractions","tag_name","parsed_value","count","relevance","positions_in_text","MonkeyLearn","require","KeywordChart","loading","keyword","keywordObject","ml","api_key","sampleData","messages","substring","extractors","extract","then","res","push","body","Spinner","animation","role","elem","keywordIndex","classifications","tag_id","confidence","SentimentChart","sentiment","sentimentGraphs","graphArray","sentimentObject","i","classifiers","classify","console","log","graphs","chartModals","CHART_COLORS","KEYWORD_COLORS","SENTIMENT_COLORS","ChartBuilder","usersArray","Set","message","has","add","filter","undefined","datesAndFreq","freqMap","Map","messageMap","datesSet","usersObj","day","getDate","fullDate","getMonth","set","userMessage","get","frequency","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.47c24364.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"GraphToggle\":\"GraphToggle_GraphToggle__1Xy2o\"};","const aux = (props) => props.children;\n\nexport default aux;\n","import React from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport { FaTelegramPlane } from \"react-icons/fa\";\nimport { FaGithub } from \"react-icons/fa\";\nimport AnchorLink from \"react-anchor-link-smooth-scroll\";\nimport classes from \"./NavigationBar.module.css\";\n\nconst navigationBar = () => {\n  return (\n    <div>\n      <Navbar expand=\"lg\" className={classes.Navbar}>\n        <Navbar.Brand href=\"/\">\n          <FaTelegramPlane style={{ marginRight: \"5\", marginBottom: \"5\" }} />\n          Telehistory\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link>\n              <AnchorLink href=\"#text-analysis\" className={classes.Anchor}>\n                Frequency\n              </AnchorLink>\n            </Nav.Link>\n            <Nav.Link>\n              <AnchorLink href=\"#keyword\" className={classes.Anchor}>\n                Keywords\n              </AnchorLink>\n            </Nav.Link>\n            <Nav.Link>\n              <AnchorLink href=\"#sentiment\" className={classes.Anchor}>\n                Sentiment\n              </AnchorLink>\n            </Nav.Link>\n            <Nav.Link\n              className={classes.RightPush}\n              href=\"https://github.com/acui51\"\n            >\n              <FaGithub size={20} />\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default navigationBar;\n","import React from \"react\";\n\nconst Footer = () => {\n  let d = new Date();\n  d = d.getFullYear();\n  return (\n    <footer>\n      <small>&copy;{d} Alix Cui </small>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Aux from \"../../hoc/Aux\";\nimport NavigationBar from \"../NavigationBar/NavigationBar\";\nimport Footer from \"../Footer/Footer\";\nimport AnchorLink from \"react-anchor-link-smooth-scroll\";\nimport { Jumbotron, Button } from \"react-bootstrap\";\nimport classes from \"./Layout.module.css\";\n\nconst Layout = (props) => {\n  return (\n    <Aux>\n      <NavigationBar />\n      <Jumbotron className={classes.Jumbotron}>\n        <div className={classes.Title}>\n          <h1>Explore Your Chat History</h1>\n          <p>\n            Utilizing exported JSON chat history from the popular messaging app,\n            Telegram, we are able to deliver you a representation of that data\n            through frequency charts, keyword extraction, and sentiment\n            analysis.\n          </p>\n          <p>\n            <AnchorLink href=\"#text-analysis\" className={classes.LearnMore}>\n              <Button className={classes.Button} variant=\"primary\">\n                Learn more\n              </Button>\n            </AnchorLink>\n          </p>\n        </div>\n      </Jumbotron>\n      <main>{props.children}</main>\n      <Footer />\n    </Aux>\n  );\n};\n\nexport default Layout;\n","import React, { useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nimport classes from \"./Chart.module.css\";\n\nfunction DisplayChartModal(props) {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      {props.graph}\n      <Button\n        className={classes.FullScreenButton}\n        variant=\"light\"\n        onClick={() => setShow(true)}\n      >\n        Fullscreen\n      </Button>\n\n      <Modal\n        show={show}\n        onHide={() => setShow(false)}\n        size=\"xl\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n      >\n        <Modal.Body>\n          <div>{props.graph}</div>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\nexport default DisplayChartModal;\n","import React from \"react\";\nimport classes from \"./GraphToggle.module.css\";\n\nconst graphToggle = (props) => {\n  return (\n    <div className={classes.GraphToggle}>\n      <label>\n        <input\n          type=\"radio\"\n          value=\"Line\"\n          checked={props.selectedOption === \"line\"}\n          onChange={() => props.graphHandler(\"line\")}\n        />\n        Line\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          value=\"Bar\"\n          checked={props.selectedOption === \"bar\"}\n          onChange={() => props.graphHandler(\"bar\")}\n        />\n        Bar\n      </label>\n    </div>\n  );\n};\n\nexport default graphToggle;\n","import React, { Component } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\nimport ChartModal from \"./ChartModal\";\nimport GraphToggle from \"../../components/GraphToggle/GraphToggle\";\nimport { FaWaveSquare } from \"react-icons/fa\";\n\nclass Chart extends Component {\n  state = {\n    type: \"line\",\n  };\n\n  data = {\n    labels: this.props.dates,\n    datasets: this.props.users.map((user, index) => {\n      let label = user;\n      let colorIndex = index % this.props.colors.length;\n      let borderColor = this.props.colors[colorIndex];\n      let data = Array.from(this.props.freq).map((date) => date[1][user]);\n      return {\n        label: label,\n        data: data,\n        borderColor: borderColor,\n        backgroundColor: borderColor,\n        fill: false,\n        lineTension: 0.1,\n        borderCapStyle: \"butt\",\n      };\n    }),\n  };\n\n  lineGraph = (\n    <Line\n      width={600}\n      height={300}\n      data={this.data}\n      options={{\n        title: {\n          display: true,\n          text: \"Message Frequency\",\n          fontSize: 20,\n        },\n        legend: {\n          display: true,\n          position: \"bottom\",\n        },\n        scales: {\n          yAxes: [\n            {\n              scaleLabel: {\n                display: true,\n                labelString: \"Messages\",\n              },\n            },\n          ],\n          xAxes: [\n            {\n              scaleLabel: {\n                display: true,\n                labelString: \"Date\",\n              },\n            },\n          ],\n        },\n      }}\n    />\n  );\n\n  barGraph = (\n    <Bar\n      data={this.data}\n      options={{\n        title: {\n          display: true,\n          text: \"Message Frequency\",\n          fontSize: 20,\n        },\n        legend: {\n          display: true,\n          position: \"bottom\",\n        },\n      }}\n    />\n  );\n\n  // onClick handler for selecting a certain graph representation\n  graphHandler = (type) => {\n    this.setState({ type: type });\n  };\n\n  render() {\n    return (\n      <div id=\"text-analysis\" className={styles.Chart}>\n        <div className={styles.ChartDesc}>\n          <h1 style={{ color: \"#ff6361\" }}>\n            <FaWaveSquare /> Frequency\n          </h1>\n          <p>\n            {\" \"}\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n            culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum\n            dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n            incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n            veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex\n            ea commodo consequat. Duis aute irure dolor in reprehenderit in\n            voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui\n            officia deserunt mollit anim id est laborum.\"\n          </p>\n          <GraphToggle\n            selectedOption={this.state.type}\n            graphHandler={this.graphHandler}\n          />\n        </div>\n        <div className={styles.ChartModal}>\n          <ChartModal\n            className={styles.ChartModal}\n            graph={this.state.type === \"line\" ? this.lineGraph : this.barGraph}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n// {this.props.type === \"line\" ? this.lineGraph : this.barGraph}\n\nexport default Chart;\n","const data = [\n  [\n    {\n      text: \"Sample Text\",\n      external_id: null,\n      error: false,\n      extractions: [\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"bro\",\n          count: 327,\n          relevance: \"0.999\",\n          positions_in_text: [],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"ppl\",\n          count: 122,\n          relevance: \"0.645\",\n          positions_in_text: [],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"funny\",\n          count: 228,\n          relevance: \"0.630\",\n          positions_in_text: [],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"hello\",\n          count: 28,\n          relevance: \"0.387\",\n          positions_in_text: [],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"gotcha\",\n          count: 108,\n          relevance: \"0.357\",\n          positions_in_text: [],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"agree\",\n          count: 18,\n          relevance: \"0.326\",\n          positions_in_text: [],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"stanford\",\n          count: 145,\n          relevance: \"0.310\",\n          positions_in_text: [],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"college\",\n          count: 99,\n          relevance: \"0.304\",\n          positions_in_text: [],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"high school\",\n          count: 15,\n          relevance: \"0.204\",\n          positions_in_text: [],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"usc\",\n          count: 209,\n          relevance: \"0.199\",\n          positions_in_text: [],\n        },\n      ],\n    },\n  ],\n  [\n    {\n      text: \"Sample Text\",\n      external_id: null,\n      error: false,\n      extractions: [\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"elon musk\",\n          count: 1,\n          relevance: \"0.952\",\n          positions_in_text: [0],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"second image\",\n          count: 1,\n          relevance: \"0.952\",\n          positions_in_text: [78],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"body look\",\n          count: 1,\n          relevance: \"0.952\",\n          positions_in_text: [162],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"spacesuit\",\n          count: 2,\n          relevance: \"0.952\",\n          positions_in_text: [36, 145],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"new design\",\n          count: 1,\n          relevance: \"0.952\",\n          positions_in_text: [105],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"photo\",\n          count: 1,\n          relevance: \"0.476\",\n          positions_in_text: [23],\n        },\n        {\n          tag_name: \"KEYWORD\",\n          parsed_value: \"spacex.\",\n          count: 1,\n          relevance: \"0.476\",\n          positions_in_text: [58],\n        },\n      ],\n    },\n  ],\n];\n\nexport default data;\n","import React, { Component } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Spinner } from \"react-bootstrap\";\nimport classes from \"./Keyword.module.css\";\nimport sampleData from \"./keywordObj\";\nimport ChartModal from \"../Chart/ChartModal.js\";\nimport { FaKey } from \"react-icons/fa\";\nimport apiKey from \"../../mock/insert_api\";\nconst MonkeyLearn = require(\"monkeylearn\");\n\nexport default class KeywordChart extends Component {\n  state = {\n    loading: true,\n    keyword: null, // holds array of the data from MonkeyLeaner API\n  };\n\n  // Make API request, and update keyword state to be an array of data\n  async componentDidMount() {\n    let keywordObject = [];\n    const ml = new MonkeyLearn(apiKey);\n    if (ml.api_key === \"\") {\n      this.setState({ keyword: sampleData, loading: false });\n    } else {\n      let model_id = \"ex_YCya9nrn\";\n      for (let user of Array.from(this.props.users)) {\n        let data = this.props.messages[user];\n        data[0] = data[0].substring(0, 50000);\n        ml.extractors.extract(model_id, data).then((res) => {\n          keywordObject.push(res.body);\n          this.setState({ keyword: keywordObject, loading: false });\n        });\n      }\n    }\n  }\n\n  render() {\n    if (\n      !this.state.keyword ||\n      this.state.keyword.length !== this.props.users.length\n    ) {\n      return (\n        <div>\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        </div>\n      );\n    }\n    // ChartJS - defining the data to be used in the code\n    const data = {\n      labels: this.state.keyword[0][0].extractions.map((elem, index) => {\n        return index + 1;\n      }),\n      datasets: this.props.users.map((user, index) => {\n        let label = user;\n        let colorIndex = index % this.props.colors.length;\n        let backgroundColor = this.props.colors[colorIndex];\n        let data = this.state.keyword[index][0].extractions.map(\n          (keyword, keywordIndex) => {\n            label += ` ${keywordIndex + 1}.\"${keyword.parsed_value}\" `;\n            return keyword.relevance;\n          }\n        );\n        return {\n          label: label,\n          data: data,\n          backgroundColor: backgroundColor,\n        };\n      }),\n    };\n\n    // ChartJS - defining the graph to be rendered\n    let graph = (\n      <Bar\n        width={600}\n        height={300}\n        data={data}\n        options={{\n          title: {\n            display: true,\n            text: \"Message Keywords\",\n            fontSize: 20,\n          },\n          legend: {\n            display: false,\n          },\n          scales: {\n            yAxes: [\n              {\n                scaleLabel: {\n                  display: true,\n                  labelString: \"Relevance\",\n                },\n              },\n            ],\n            xAxes: [\n              {\n                scaleLabel: {\n                  display: true,\n                  labelString: \"Keyword Phrase\",\n                },\n              },\n            ],\n          },\n        }}\n      />\n    );\n\n    return (\n      <div id=\"keyword\">\n        <div className={classes.Chart}>\n          <div className={classes.ChartModal}>\n            <ChartModal graph={graph} />\n          </div>\n          <div className={classes.ChartDesc}>\n            <h1 style={{ color: \"#58508d\" }}>\n              Keywords <FaKey />\n            </h1>\n            <p>\n              \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n              enim ad minim veniam, quis nostrud exercitation ullamco laboris\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\n              nulla pariatur. Excepteur sint occaecat cupidatat non proident,\n              sunt in culpa qui officia deserunt mollit anim id est\n              laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n              sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\n              nulla pariatur. Excepteur sint occaecat cupidatat non proident,\n              sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// NEVER PUBLICLY SHARE/PUBLISH YOU'RE APIKEY OR KEEP IT ON THE FRONT-END. THIS PROJECT\n// IS JUST SO YOU CAN HAVE FUN LOOKING AT YOUR DATA.\n\n// Insert your MonkeyLearner API key inbetween the quotes\nconst apiKey = \"\";\n\nexport default apiKey;\n","const data = [\n  [\n    {\n      text: \"Sample Data\",\n      external_id: null,\n      error: false,\n      classifications: [\n        {\n          tag_name: \"Negative\",\n          tag_id: 122921385,\n          confidence: 0.639,\n        },\n      ],\n    },\n  ],\n  [\n    {\n      text: \"Sample Data\",\n      external_id: null,\n      error: false,\n      classifications: [\n        {\n          tag_name: \"Positive\",\n          tag_id: 122921383,\n          confidence: 0.407,\n        },\n      ],\n    },\n  ],\n];\n\nexport default data;\n","import React, { Component } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport classes from \"./Sentiment.module.css\";\nimport { Spinner } from \"react-bootstrap\";\nimport ChartModal from \"../Chart/ChartModal\";\nimport { FaSmile } from \"react-icons/fa\";\nimport sampleData from \"./sentimentObj\";\nimport apiKey from \"../../mock/insert_api\";\n\nconst MonkeyLearn = require(\"monkeylearn\");\n\nconst HEIGHT = 300;\n\nexport default class SentimentChart extends Component {\n  state = {\n    loading: true,\n    sentiment: null,\n  };\n\n  async componentDidMount() {\n    let sentimentObject = [];\n    const ml = new MonkeyLearn(apiKey);\n    if (ml.api_key === \"\") {\n      this.setState({ sentiment: sampleData, loading: false });\n    }\n    let model_id = \"cl_pi3C7JiL\";\n    for (let user of Array.from(this.props.users)) {\n      let data = this.props.messages[user];\n      data[0] = data[0].substring(0, 50000);\n      ml.classifiers.classify(model_id, data).then((res) => {\n        console.log(res.body);\n        sentimentObject.push(res.body);\n        this.setState({ sentiment: sentimentObject, loading: false });\n      });\n    }\n  }\n\n  sentimentGraphs = () => {\n    let graphArray = [];\n    let sentimentObject = this.state.sentiment;\n    for (let i = 0; i < this.props.users.length; i++) {\n      let data = {\n        labels: [\n          sentimentObject[i][0].classifications[0][\"tag_name\"] + \" Certainty\",\n          \"Uncertainty\",\n        ],\n        datasets: [\n          {\n            data: [\n              sentimentObject[i][0].classifications[0][\"confidence\"],\n              1 - sentimentObject[i][0].classifications[0][\"confidence\"],\n            ],\n            backgroundColor: [this.props.colors[i], \"#d6d6d6\"],\n          },\n        ],\n      };\n\n      let graph = (\n        <Pie\n          height={HEIGHT / this.props.users.length}\n          data={data}\n          options={{\n            title: {\n              display: true,\n              text: this.props.users[i],\n              fontSize: 30,\n            },\n            legend: {\n              display: true,\n            },\n          }}\n        />\n      );\n      graphArray.push(graph);\n    }\n    return graphArray;\n  };\n\n  render() {\n    if (\n      !this.state.sentiment ||\n      this.state.sentiment.length !== this.props.users.length\n    ) {\n      return (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      );\n    }\n    let graphs = this.sentimentGraphs();\n    let chartModals = [];\n    for (let graph of graphs) {\n      chartModals.push(<ChartModal graph={graph} />);\n    }\n\n    return (\n      <div id=\"sentiment\">\n        <div className={classes.Chart}>\n          <div className={classes.ChartDesc}>\n            <h1 style={{ color: \"#ffa600\" }}>\n              <FaSmile /> Sentiment\n            </h1>\n            <p>\n              {\" \"}\n              \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n              enim ad minim veniam, quis nostrud exercitation ullamco laboris\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\n              nulla pariatur. Excepteur sint occaecat cupidatat non proident,\n              sunt in culpa qui officia deserunt mollit anim id est\n              laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n              sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\n              nulla pariatur. Excepteur sint occaecat cupidatat non proident,\n              sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n            </p>\n          </div>\n          <div className={classes.ChartModal}> {chartModals}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport data from \"../../data/sample.json\";\nimport Chart from \"../../components/Chart/Chart\";\nimport Aux from \"../../hoc/Aux\";\nimport KeywordChart from \"../../components/KeywordChart/Keyword\";\nimport SentimentChart from \"../../components/Sentiment/Sentiment\";\n\nconst CHART_COLORS = [\"#003f5c\", \"#ff6361\", \"#bc5090\", \"#58508d\", \"#ffa600\"];\nconst KEYWORD_COLORS = [\"#58508d\", \"#ffa600\", \"#003f5c\", \"#ff6361\", \"#bc5090\"];\nconst SENTIMENT_COLORS = [\n  \"#ffa600\",\n  \"#003f5c\",\n  \"#ff6361\",\n  \"#bc5090\",\n  \"#58508d\",\n];\n\nclass ChartBuilder extends Component {\n  state = {\n    users: [],\n    type: \"line\",\n  };\n\n  // Output array of users\n  usersArray = (data) => {\n    let users = new Set();\n    for (let message of data.messages) {\n      if (!users.has(message.from)) {\n        users.add(message.from);\n      }\n    }\n    return Array.from(users).filter((user) => user !== undefined);\n  };\n\n  /**\n   * Outputs an objec with dates for the chart labels, and frequency object\n   * for the actual data\n   */\n  datesAndFreq = (data, users) => {\n    let freqMap = new Map();\n    let messageMap = new Map();\n    let datesSet = new Set();\n    let usersObj = {};\n    for (let user of users) {\n      usersObj[user] = 0;\n      messageMap[user] = [\"\"];\n    }\n\n    for (let message of data.messages) {\n      // ex. fullDate = '6/20'\n      let date = new Date(message.date);\n      let day = date.getDate();\n      let month = date.getMonth() + 1;\n      let fullDate = month + \"/\" + day;\n      if (!datesSet.has(fullDate)) {\n        datesSet.add(fullDate);\n      }\n\n      if (!freqMap.has(fullDate)) {\n        freqMap.set(fullDate, { ...usersObj });\n      }\n      let userMessage = message.from;\n      let freqObj = freqMap.get(fullDate);\n      freqObj[userMessage]++;\n\n      if (typeof message.text === \"string\") {\n        // If messenger is undefined, skip that\n        if (messageMap[message.from] === undefined) {\n          continue;\n        }\n        messageMap[message.from][0] += message.text + \" \";\n      }\n    }\n    return [Array.from(datesSet), freqMap, messageMap];\n  };\n\n  render() {\n    const users = this.usersArray(data);\n    const frequency = this.datesAndFreq(data, users);\n\n    return (\n      <Aux>\n        <Chart\n          dates={frequency[0]}\n          freq={frequency[1]}\n          users={users}\n          colors={CHART_COLORS}\n        />\n        <KeywordChart\n          users={users}\n          messages={frequency[2]}\n          colors={KEYWORD_COLORS}\n        />\n        <SentimentChart\n          users={users}\n          colors={SENTIMENT_COLORS}\n          messages={frequency[2]}\n        />\n      </Aux>\n    );\n  }\n}\n\nexport default ChartBuilder;\n","import React, { Component } from \"react\";\nimport Layout from \"./components/Layout/Layout\";\nimport ChartBuilder from \"./containers/ChartBuilder/ChartBuilder\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Layout>\n          <ChartBuilder></ChartBuilder>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chart\":\"Chart_Chart__2W4hD\",\"ChartDesc\":\"Chart_ChartDesc__3XuU6\",\"ChartModal\":\"Chart_ChartModal__3fbYy\",\"FullScreenButton\":\"Chart_FullScreenButton___qyW4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"NavigationBar_Navbar__3SjLU\",\"RightPush\":\"NavigationBar_RightPush__2544s\",\"Anchor\":\"NavigationBar_Anchor__1OcTq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Jumbotron\":\"Layout_Jumbotron__3nUsv\",\"Title\":\"Layout_Title__1Dl3j\",\"Button\":\"Layout_Button__AJwFS\",\"LearnMore\":\"Layout_LearnMore__1K6Av\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chart\":\"Keyword_Chart__2JwGE\",\"ChartModal\":\"Keyword_ChartModal__1vx5j\",\"ChartDesc\":\"Keyword_ChartDesc__1XzTs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chart\":\"Sentiment_Chart__1UgTg\",\"ChartDesc\":\"Sentiment_ChartDesc__XEcei\",\"ChartModal\":\"Sentiment_ChartModal__2l5HK\"};"],"sourceRoot":""}